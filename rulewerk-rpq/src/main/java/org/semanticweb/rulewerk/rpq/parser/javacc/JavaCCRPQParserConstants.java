/* Generated By:JavaCC: Do not edit this line. JavaCCRPQParserConstants.java */
package org.semanticweb.rulewerk.rpq.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCRPQParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int COMMENT = 2;
  /** RegularExpression Id. */
  int SELECT = 5;
  /** RegularExpression Id. */
  int DISTINCT = 6;
  /** RegularExpression Id. */
  int WHERE = 7;
  /** RegularExpression Id. */
  int ASK = 8;
  /** RegularExpression Id. */
  int VARORPREDNAME = 9;
  /** RegularExpression Id. */
  int A2Z = 10;
  /** RegularExpression Id. */
  int A2ZN = 11;
  /** RegularExpression Id. */
  int A2ZND = 12;
  /** RegularExpression Id. */
  int PNAME_LN = 13;
  /** RegularExpression Id. */
  int PNAME_NS = 14;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 15;
  /** RegularExpression Id. */
  int PN_CHARS_U = 16;
  /** RegularExpression Id. */
  int PN_CHARS = 17;
  /** RegularExpression Id. */
  int PN_PREFIX = 18;
  /** RegularExpression Id. */
  int PN_LOCAL = 19;
  /** RegularExpression Id. */
  int COMMA = 20;
  /** RegularExpression Id. */
  int NAMED_NULL = 21;
  /** RegularExpression Id. */
  int LPAREN = 22;
  /** RegularExpression Id. */
  int RPAREN = 23;
  /** RegularExpression Id. */
  int LBRACE = 24;
  /** RegularExpression Id. */
  int RBRACE = 25;
  /** RegularExpression Id. */
  int INTEGER = 26;
  /** RegularExpression Id. */
  int DECIMAL = 27;
  /** RegularExpression Id. */
  int DOUBLE = 28;
  /** RegularExpression Id. */
  int SIGN = 29;
  /** RegularExpression Id. */
  int DIGIT = 30;
  /** RegularExpression Id. */
  int DIGITS = 31;
  /** RegularExpression Id. */
  int EXPONENT = 32;
  /** RegularExpression Id. */
  int COLON = 33;
  /** RegularExpression Id. */
  int ARROW = 34;
  /** RegularExpression Id. */
  int TILDE = 35;
  /** RegularExpression Id. */
  int CONCAT = 36;
  /** RegularExpression Id. */
  int ALTERN = 37;
  /** RegularExpression Id. */
  int KSTAR = 38;
  /** RegularExpression Id. */
  int KPLUS = 39;
  /** RegularExpression Id. */
  int CONVEL = 40;
  /** RegularExpression Id. */
  int IRI_ABSOLUTE = 41;
  /** RegularExpression Id. */
  int BASE = 42;
  /** RegularExpression Id. */
  int PREFIX = 43;
  /** RegularExpression Id. */
  int SOURCE = 44;
  /** RegularExpression Id. */
  int CUSTOM_DIRECTIVE = 45;
  /** RegularExpression Id. */
  int DIRECTIVENAME = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int ARITY = 48;
  /** RegularExpression Id. */
  int ARGUMENT_NAME = 49;
  /** RegularExpression Id. */
  int UNIVAR = 50;
  /** RegularExpression Id. */
  int EXIVAR = 51;
  /** RegularExpression Id. */
  int LANGTAG = 52;
  /** RegularExpression Id. */
  int DATATYPE = 53;
  /** RegularExpression Id. */
  int LBRACKET = 60;
  /** RegularExpression Id. */
  int PIPE_DELIMITED_LITERAL = 61;
  /** RegularExpression Id. */
  int HASH_DELIMITED_LITERAL = 62;
  /** RegularExpression Id. */
  int UNPAREN = 63;
  /** RegularExpression Id. */
  int UNBRACE = 64;
  /** RegularExpression Id. */
  int RBRACKET = 65;
  /** RegularExpression Id. */
  int UNBRACKET = 66;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_STRING = 67;
  /** RegularExpression Id. */
  int DOUBLE_QUOTED_STRING = 68;
  /** RegularExpression Id. */
  int TRIPLE_QUOTED_STRING = 69;
  /** RegularExpression Id. */
  int SIXFOLD_QUOTED_STRING = 70;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 71;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int SIXFOLD_QUOTED = 1;
  /** Lexical state. */
  int TRIPLE_QUOTED = 2;
  /** Lexical state. */
  int DOUBLE_QUOTED = 3;
  /** Lexical state. */
  int SINGLE_QUOTED = 4;
  /** Lexical state. */
  int HASH_DELIMITED = 5;
  /** Lexical state. */
  int PIPE_DELIMITED = 6;
  /** Lexical state. */
  int BRACKET_DELIMITED = 7;
  /** Lexical state. */
  int DIRECTIVE = 8;
  /** Lexical state. */
  int ABSOLUTE_IRI = 9;
  /** Lexical state. */
  int BRACE_DELIMITED = 10;
  /** Lexical state. */
  int PAREN_DELIMITED = 11;
  /** Lexical state. */
  int REGEX = 12;
  /** Lexical state. */
  int RPQS = 13;
  /** Lexical state. */
  int TERM = 14;
  /** Lexical state. */
  int DIRECTIVE_ARGUMENTS = 15;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<COMMENT>",
    "\"@\"",
    "\"<\"",
    "\"select\"",
    "\"distinct\"",
    "\"where\"",
    "\"ask\"",
    "<VARORPREDNAME>",
    "<A2Z>",
    "<A2ZN>",
    "<A2ZND>",
    "<PNAME_LN>",
    "<PNAME_NS>",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "\",\"",
    "<NAMED_NULL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<SIGN>",
    "<DIGIT>",
    "<DIGITS>",
    "<EXPONENT>",
    "\":\"",
    "\":-\"",
    "\"~\"",
    "\"/\"",
    "\"|\"",
    "\"*\"",
    "\"+\"",
    "\"^\"",
    "<IRI_ABSOLUTE>",
    "\"base\"",
    "\"prefix\"",
    "\"source\"",
    "<CUSTOM_DIRECTIVE>",
    "<DIRECTIVENAME>",
    "\".\"",
    "<ARITY>",
    "<ARGUMENT_NAME>",
    "<UNIVAR>",
    "<EXIVAR>",
    "<LANGTAG>",
    "\"^^\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "\"\\\"\\\"\\\"\"",
    "\"|\"",
    "\"#\"",
    "\"[\"",
    "<PIPE_DELIMITED_LITERAL>",
    "<HASH_DELIMITED_LITERAL>",
    "<UNPAREN>",
    "<UNBRACE>",
    "\"]\"",
    "<UNBRACKET>",
    "<SINGLE_QUOTED_STRING>",
    "<DOUBLE_QUOTED_STRING>",
    "<TRIPLE_QUOTED_STRING>",
    "<SIXFOLD_QUOTED_STRING>",
    "<ESCAPE_SEQUENCE>",
  };

}
